type Action = variant {
  Range : record { nat64; opt nat64 };
  AggregateWindow : record { text; AggregateFunction };
  Filter : Expression;
};
type AggregateFunction = variant { Max; Min; Sum; Mean };
type Entry = record {
  tags : vec record { text; text };
  fields : vec record { text; text };
  timestamp : nat64;
};
type Expression = variant {
  Or : record { Expression; Expression };
  And : record { Expression; Expression };
  TagFilter : vec text;
  FieldFilter : vec text;
  FieldContainsKey : text;
  TagEq : record { text; text };
  TimestampEq : nat64;
  TimestampGt : nat64;
  TimestampLt : nat64;
  FieldEq : record { text; text };
  TagContainsKey : text;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  status_code : nat16;
};
type Result = variant { Ok : Settings; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : vec Entry; Err : text };
type Settings = record { interval : nat64; owner : principal };
service : () -> {
  getSettings : () -> (Result) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  insert : (text, Entry) -> (Result_1);
  run_query : (text, vec Action) -> (Result_2) query;
}